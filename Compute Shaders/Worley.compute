uint octaves;
float lacunarity;
float persistence;
uint3 cell_count;
float4x4 region;
uint4 write_types;
bool invert;

RWTexture2D<float4> result_2d;
StructuredBuffer<float2> points_2d;

RWTexture3D<float4> result_3d;
StructuredBuffer<float3> points_3d;

static int2 offsets_2d [9] = {
    int2(-1, -1), int2(0, -1), int2(1, -1),
    int2(-1, 0), int2(0, 0), int2(1, 0),
    int2(-1, 1), int2(0, 1), int2(1, 1)
};

static int3 offsets_3d [27] = {
    int3(-1, -1, -1), int3(0, -1, -1), int3(1, -1, -1),
    int3(-1, 0, -1), int3(0, 0, -1), int3(1, 0, -1),
    int3(-1, 1, -1), int3(0, 1, -1), int3(1, 1, -1),

    int3(-1, -1, 0), int3(0, -1, 0), int3(1, -1, 0),
    int3(-1, 0, 0), int3(0, 0, 0), int3(1, 0, 0),
    int3(-1, 1, 0), int3(0, 1, 0), int3(1, 1, 0),
    
    int3(-1, -1, 1), int3(0, -1, 1), int3(1, -1, 1),
    int3(-1, 0, 1), int3(0, 0, 1), int3(1, 0, 1),
    int3(-1, 1, 1), int3(0, 1, 1), int3(1, 1, 1)
};

float get_output(const uint write_type, const float before, const float noise)
{
    switch (write_type)
    {
        case 0:
            return before;
        case 1:
            return 0;
        case 2:
            return 0.5;
        case 3:
            return 1;
        default:
            return noise;
    }
}

float4 get_output(const float4 before, const float noise)
{
    return float4(
        get_output(write_types.r, before.r, noise),
        get_output(write_types.g, before.g, noise),
        get_output(write_types.b, before.b, noise),
        get_output(write_types.a, before.a, noise)
        );
}

float noise_2d(const float2 uv)
{
    // Calculate the current cell
    const float2 coord = (uv * cell_count.xy) % cell_count.xy;
    const int2 root = int2(coord) % cell_count.xy;
    
    // Iterate through offsets
    float min_dist = 4;
    for (uint i = 0; i < 9; i++)
    {
        const int2 neighbour = (root + offsets_2d[i] + cell_count.xy) % cell_count.xy;
        for (uint j = 0; j < 9; j++)
        {
            const int2 alt_neighbour = neighbour + offsets_2d[j] * cell_count.xy;
            const float2 neighbour_coord = alt_neighbour + points_2d[neighbour.x + neighbour.y * cell_count.x];
            
            // Compare which point is closest
            const float dist = distance(neighbour_coord, coord);
            if (dist < min_dist)
                min_dist = dist;
        }
    }
    
    // Store distance
    return min_dist;
}

float noise_3d(const float3 uv)
{
    // Calculate the current cell
    const float3 coord = (uv * cell_count) % cell_count;
    const int3 root = int3(coord) % cell_count;
    
    // Iterate through offsets
    float min_dist = 6;
    for (uint i = 0; i < 27; i++)
    {
        const int3 neighbour = (root + offsets_3d[i] + cell_count) % cell_count;
        for (uint j = 0; j < 27; j++)
        {
            const int3 alt_neighbour = neighbour + offsets_3d[j] * cell_count;
            const float3 neighbour_coord = alt_neighbour + points_3d[neighbour.x + neighbour.y * cell_count.x + neighbour.z * cell_count.x * cell_count.y];
            
            // Compare which point is closest
            const float dist = distance(neighbour_coord, coord);
            if (dist < min_dist)
                min_dist = dist;
        }
    }
    
    // Store distance
    return min_dist;
}

#pragma kernel worley_2d
[numthreads(8,8,8)]
void worley_2d (uint3 id : SV_DispatchThreadID)
{
    float2 size;
    result_2d.GetDimensions(size.x, size.y);
    const float2 uv = lerp(region._11_12, region._21_22, (float2) id / size);

    float val = 0;
    for (uint i = 0; i < octaves; i++)
    {
        const float frequency = pow(abs(lacunarity), i);
        const float amplitude = pow(abs(persistence), i);
        
        val = lerp(val, noise_2d(uv * frequency), amplitude);
    }

    const float4 before = result_2d[id.xy];
    result_2d[id.xy] = get_output(before, invert ? 1 - val : val);
}

#pragma kernel worley_3d
[numthreads(8,8,8)]
void worley_3d (uint3 id : SV_DispatchThreadID)
{
    float3 size;
    result_3d.GetDimensions(size.x, size.y, size.z);
    const float3 uv = lerp(region._11_12_13, region._21_22_23, (float3) id / size);
    
    float val = 0;
    for (uint i = 0; i < octaves; i++)
    {
        const float frequency = pow(abs(lacunarity), i);
        const float amplitude = pow(abs(persistence), i);
        
        val = lerp(val, noise_3d(uv * frequency), amplitude);
    }

    const float4 before = result_3d[id.xyz];
    result_3d[id.xyz] = get_output(before, invert ? 1 - val : val);
}